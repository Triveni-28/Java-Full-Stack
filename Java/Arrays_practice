import java.util.*;

public class ArrayPracticeHard {

    public static void main(String[] args) {
        findLeaders();
        findMissingNumber();
        findPairsWithTargetSum();
        leftRotateArray();
        rearrangeAlternatePosNeg();
        longestIncreasingSubarray();
    }

    // 1. Find the leader elements in an array
    static void findLeaders() {
        int[] arr = {16, 17, 4, 3, 5, 2};
        System.out.print("Leaders: ");
        int maxRight = arr[arr.length - 1];
        System.out.print(maxRight + " ");
        for (int i = arr.length - 2; i >= 0; i--) {
            if (arr[i] > maxRight) {
                maxRight = arr[i];
                System.out.print(maxRight + " ");
            }
        }
        System.out.println("\n");
    }

    // 2. Find the missing number in a sequence of 1 to N
    static void findMissingNumber() {
        int[] arr = {1, 2, 4, 5};
        int n = arr.length + 1;
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;
        for (int num : arr) actualSum += num;
        System.out.println("Missing number: " + (expectedSum - actualSum) + "\n");
    }

    // 3. Find pairs in an array that sum to a target value
    static void findPairsWithTargetSum() {
        int[] arr = {1, 2, 3, 4, 5};
        int target = 6;
        System.out.println("Pairs that sum to " + target + ":");
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] + arr[j] == target)
                    System.out.println("(" + arr[i] + ", " + arr[j] + ")");
            }
        }
        System.out.println();
    }

    // 4. Implement left rotation of array by D positions
    static void leftRotateArray() {
        int[] arr = {1, 2, 3, 4, 5};
        int d = 2;
        int n = arr.length;
        int[] rotated = new int[n];
        for (int i = 0; i < n; i++) {
            rotated[i] = arr[(i + d) % n];
        }
        System.out.print("Array after " + d + " left rotations: ");
        for (int num : rotated) System.out.print(num + " ");
        System.out.println("\n");
    }

    // 5. Rearrange array in alternating positive and negative numbers
    static void rearrangeAlternatePosNeg() {
        int[] arr = {1, -2, 3, -4, 5, -6};
        List<Integer> pos = new ArrayList<>();
        List<Integer> neg = new ArrayList<>();
        for (int val : arr) {
            if (val >= 0) pos.add(val);
            else neg.add(val);
        }
        int i = 0, j = 0, k = 0;
        while (i < pos.size() && j < neg.size()) {
            arr[k++] = pos.get(i++);
            arr[k++] = neg.get(j++);
        }
        while (i < pos.size()) arr[k++] = pos.get(i++);
        while (j < neg.size()) arr[k++] = neg.get(j++);
        System.out.print("Rearranged: ");
        for (int val : arr) System.out.print(val + " ");
        System.out.println("\n");
    }

    // 6. Find the longest increasing subarray
    static void longestIncreasingSubarray() {
        int[] arr = {1, 2, 2, 4, 5, 1, 2, 3, 4, 0};
        int maxLen = 1, len = 1, start = 0, end = 0, tempStart = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > arr[i - 1]) {
                len++;
            } else {
                if (len > maxLen) {
                    maxLen = len;
                    start = tempStart;
                    end = i - 1;
                }
                len = 1;
                tempStart = i;
            }
        }
        if (len > maxLen) {
            maxLen = len;
            start = tempStart;
            end = arr.length - 1;
        }
        System.out.print("Longest increasing subarray: ");
        for (int i = start; i <= end; i++) System.out.print(arr[i] + " ");
        System.out.println("\nLength: " + maxLen);
    }
}
